plugins {
    id 'com.jfrog.bintray' version '1.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'com.gradle.plugin-publish' version '0.9.1'
    id 'com.palantir.git-version' version '0.1.3'

    id 'checkstyle'
    id 'eclipse'
    id 'findbugs'
    id 'jacoco'
    id 'java'
    id 'idea'
    id 'maven-publish'
}

apply plugin: EclipseCheckstylePlugin
apply plugin: JavaVersionPlugin

group 'com.palantir.ri'
version gitVersion()

javaVersion {
    version '1.7'
}

repositories {
    jcenter()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

publishing {
    publications {
        bintray(MavenPublication) {
            from components.java
            artifact(sourceJar) {
                classifier 'sources'
            }
        }
    }
}

checkstyle {
    configFile = file("${rootDir}/checkstyle/checkstyle.xml")
    toolVersion = checkstyleVersion
    configProperties = [samedir: "${rootDir}/checkstyle"]
}

findbugs {
    toolVersion = findbugsVersion
    effort = 'max'
    reportLevel = 'medium'
    findbugsTest {
      excludeFilter = file("${rootDir}/findbugs/testExcludeFilter.xml")
    }
}

tasks.withType(FindBugs) {
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

tasks.eclipse.dependsOn(tasks.cleanEclipse)

eclipseClasspath.doLast {
    eclipse.classpath.sourceSets.main.allSource.each { it.mkdirs() }
    eclipse.classpath.sourceSets.main.output.each { it.mkdirs() }
    eclipse.classpath.sourceSets.test.output.each { it.mkdirs() }
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport.reports.xml.enabled true

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

tasks.coveralls {
    onlyIf { System.getenv('CI') }
    dependsOn tasks.jacocoTestReport
}

tasks.check.dependsOn(javadoc)

dependencies {
    testCompile "junit:junit:$junitVersion"
    testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'releases'
        name = 'resource-identifier'
        userOrg = 'palantir'
        licenses = ['Apache-2.0']
        publications = ['bintray']
    }
}

bintrayUpload.onlyIf {
    System.getenv('TRAVIS_TAG') && project.version ==~ /\d+\.\d+\.\d+/
}

bintrayUpload.dependsOn { generatePomFileForBintrayPublication }
bintrayUpload.dependsOn { sourceJar }
bintrayUpload.dependsOn { build }

